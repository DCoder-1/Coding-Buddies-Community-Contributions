#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/list_update_policy.hpp>

using namespace std;
using namespace __gnu_pbds;

#define ll long long
#define MOD 1000000007
typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> PBDS;

struct Tree
{
    ll val;
    Tree *left;
    Tree *right;
    Tree(ll x) : val(x), left(NULL), right(NULL) {}
};
Tree *newNode(ll val)
{
    Tree *node = (Tree *)malloc(sizeof(Tree));
    node->val = val;
    node->left = node->right = NULL;
    return (node);
}
Tree *createTree(ll arr[], Tree *root, ll i, ll n)
{
    if (i < n && arr[i] != -1)
    {
        Tree *temp = newNode(arr[i]);
        root = temp;
        root->left = createTree(arr, root->left, 2 * i + 1, n);
        root->right = createTree(arr, root->right, 2 * i + 2, n);
    }
    return root;
}
bool solution(Tree *root)
{
    Tree *l, *r;
    if (!root)
        return true;
    queue<Tree *> q1, q2;
    q1.push(root->left);
    q2.push(root->right);
    while (!q1.empty() && !q2.empty())
    {
        l = q1.front();
        q1.pop();
        r = q2.front();
        q2.pop();
        if (l == NULL && r == NULL)
            continue;
        if (l == NULL || r == NULL)
            return false;
        if (l->val != r->val)
            return false;
        q1.push(l->left);
        q1.push(l->right);
        q2.push(r->right);
        q2.push(r->left);
    }
    return true;
}
int main()
{
    ios_base::sync_with_stdio(true);
    cin.tie(NULL);
    cout.tie(NULL);
    ll n;
    cout << "Enter the number of nodes in the tree : ";
    cin >> n;
    ll arr[n];
    cout << "Enter the root node array : (if a node is null then input -1)\n";
    for (ll i = 0; i < n; ++i)
        cin >> arr[i];
    Tree *root = createTree(arr, root, 0, n);
    ll ans = solution(root);
    if (ans == 1)
        cout << "True\n";
    else
        cout << "False\n";
    return 0;
}
